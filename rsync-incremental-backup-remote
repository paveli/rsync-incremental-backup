#!/bin/bash

# Configuration variables (change as you wish)
src="${1:-/path/to/source}"
dst="${2:-/path/to/target}"
remote="${3:-ssh_remote}"
sshPort="${4:-22}"
keyFile="${5}"
backupDepth=7
timeout=1800
pathBak0="data"
partialFolderName=".rsync-partial"
rotationLockFileName=".rsync-rotation-lock"
pathBakN="backup"
nameBakN="backup"
exclusionFileName="exclude.txt"
dateCmd="date"
dateFormat="+%Y-%m-%dT%H:%M:%S%z"
logName="rsync-incremental-backup_$(${dateCmd} ${dateFormat})_$(${dateCmd} +%H-%M-%S).log"
ownFolderName=".rsync-incremental-backup"
logFolderName="log"

# Combinate previously defined variables for use (don't touch this)
ownFolderPath="${HOME}/${ownFolderName}"
tempLogPath="${ownFolderPath}/${remote}_${dst//[\/]/\\}"
exclusionFilePath="${ownFolderPath}/${exclusionFileName}"
remoteDst="${remote}:${dst}"
bak0="${dst}/${pathBak0}"
remoteBak0="${remoteDst}/${pathBak0}"
partialFolderPath="${dst}/${partialFolderName}"
rotationLockFilePath="${dst}/${rotationLockFileName}"
logPath="${dst}/${pathBakN}/${logFolderName}"
remoteLogPath="${remote}:${logPath}"
logFile="${tempLogPath}/${logName}"
if [ ! -z "${keyFile}" ]
then
	useKeyFile="-i${keyFile}" #I had to use -ikeyFile without space, otherwise it produces error by adding a space before keyFile name
fi

# Prepare own folder
mkdir -p "${tempLogPath}"
touch "${logFile}"
touch "${exclusionFilePath}"

writeToLog() {
	echo -e "${1}" | tee -a "${logFile}"
}

writeToLog "********************************"
writeToLog "*                              *"
writeToLog "*   rsync-incremental-backup   *"
writeToLog "*                              *"
writeToLog "********************************"

# Prepare backup paths
i=1
while [ "${i}" -le "${backupDepth}" ]
do
	export "bak${i}"="${dst}/${pathBakN}/${nameBakN}.${i}"
	true "$((i = i + 1))"
done

writeToLog "\\n[$(${dateCmd} ${dateFormat})] You are going to backup"
writeToLog "\\tfrom:  ${src}"
writeToLog "\\tto:    ${remoteBak0}"

# Check remote connection
if ! ssh -p "${sshPort}" "${useKeyFile}" -q -o BatchMode=yes -o ConnectTimeout=10 "${remote}" exit
then
	writeToLog "\\n[$(${dateCmd} ${dateFormat})] Remote destination is not reachable"
	exit 1
fi

# Prepare paths at destination
ssh -p "${sshPort}" "${useKeyFile}" "${remote}" "mkdir -p ${dst} ${logPath}"

writeToLog "\\n[$(${dateCmd} ${dateFormat})] Old logs sending begins\\n"

# Send old pending logs to destination
rsync -e "ssh -p ${sshPort} ${useKeyFile}" -rhvz --remove-source-files --exclude="${logName}" --log-file="${logFile}" \
"${tempLogPath}/" "${remoteLogPath}/"

writeToLog "\\n[$(${dateCmd} ${dateFormat})] Old logs sending finished"

# Rotate backups if last rsync succeeded ..
if (ssh -p "${sshPort}" "${useKeyFile}" "${remote}" "[ ! -d ${partialFolderPath} ] && [ ! -e ${rotationLockFilePath} ]")
then
	# .. and there is previous data
	if (ssh -p "${sshPort}" "${useKeyFile}" "${remote}" "[ -d ${bak0} ]")
	then
		writeToLog "\\n[$(${dateCmd} ${dateFormat})] Backups rotation begins"

		true "$((i = i - 1))"

		# Remove the oldest backup if exists
		bak="bak${i}"
		ssh -p "${sshPort}" "${useKeyFile}" "${remote}" "rm -rf ${!bak}"

		# Rotate the previous backups
		while [ "${i}" -gt 0 ]
		do
			bakNewPath="bak${i}"
			true "$((i = i - 1))"
			bakOldPath="bak${i}"
			if (ssh -p "${sshPort}" "${useKeyFile}" "${remote}" "[ -d ${!bakOldPath} ]")
			then
				ssh -p "${sshPort}" "${useKeyFile}" "${remote}" "mv ${!bakOldPath} ${!bakNewPath}"
			fi
		done

		writeToLog "[$(${dateCmd} ${dateFormat})] Backups rotation finished\\n"
	else
		writeToLog "\\n[$(${dateCmd} ${dateFormat})] No previous data found, there is no backups to be rotated\\n"
	fi
else
	writeToLog "\\n[$(${dateCmd} ${dateFormat})] Last backup failed, backups will not be rotated\\n"
fi

# Set rotation lock file to detect in next run when backup fails
ssh -p "${sshPort}" "${useKeyFile}" "${remote}" "touch ${rotationLockFilePath}"

writeToLog "[$(${dateCmd} ${dateFormat})] Backup begins\\n"

# Do the backup
if rsync -e "ssh -p ${sshPort} ${useKeyFile}" -achvz --progress --timeout="${timeout}" --delete --no-W --partial-dir="${partialFolderName}" \
--link-dest="${bak1}/" --log-file="${logFile}" --exclude="${ownFolderPath}" --chmod=+r \
--exclude-from="${exclusionFilePath}" "${src}/" "${remoteBak0}/"

then
	writeToLog "\\n[$(${dateCmd} ${dateFormat})] Backup completed successfully\\n"

	# Clear unneeded partials and lock file
	ssh -p "${sshPort}" "${useKeyFile}" "${remote}" "rm -rf ${partialFolderPath} ${rotationLockFilePath}"
	rsyncFail=0
else
	writeToLog "\\n[$(${dateCmd} ${dateFormat})] Backup failed, try again later\\n"
	rsyncFail=1
fi

# Send the complete log file to destination
if scp -P "${sshPort}" "${useKeyFile}" "${logFile}" "${remoteLogPath}"
then
	rm "${logFile}"
fi

exit "${rsyncFail}"
